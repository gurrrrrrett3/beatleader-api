/**
 * BeatLeader-Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AchievementsApi", () => {
  let instance: api.AchievementsApi
  beforeEach(function() {
    instance = new api.AchievementsApi(config)
  });

  test("achievementIdLevelPut", () => {
    const id: number = 56
    const name: string = "name_example"
    const image: string = "image_example"
    const smallImage: string = "smallImage_example"
    const level: number = 56
    const description: string = "description_example"
    const detailedDescription: string = "detailedDescription_example"
    const color: string = "color_example"
    const link: string = "link_example"
    return expect(instance.achievementIdLevelPut(id, name, image, smallImage, level, description, detailedDescription, color, link, {})).resolves.toBe(null)
  })
  test("achievementPut", () => {
    const name: string = "name_example"
    const description: string = "description_example"
    const link: string = "link_example"
    return expect(instance.achievementPut(name, description, link, {})).resolves.toBe(null)
  })
  test("achievementsGet", () => {
    const id: string = "id_example"
    return expect(instance.achievementsGet(id, {})).resolves.toBe(null)
  })
  test("playerIdAchievementPost", () => {
    const id: string = "id_example"
    const achievemntId: number = 56
    const level: number = 56
    return expect(instance.playerIdAchievementPost(id, achievemntId, level, {})).resolves.toBe(null)
  })
  test("playerIdAchievementsGet", () => {
    const id: string = "id_example"
    return expect(instance.playerIdAchievementsGet(id, {})).resolves.toBe(null)
  })
  test("surveyAchievementGet", () => {
    return expect(instance.surveyAchievementGet({})).resolves.toBe(null)
  })
  test("surveyFilledPost", () => {
    const playerId: string = "playerId_example"
    const key: string = "key_example"
    return expect(instance.surveyFilledPost(playerId, key, {})).resolves.toBe(null)
  })
})

describe("AuthenticationApi", () => {
  let instance: api.AuthenticationApi
  beforeEach(function() {
    instance = new api.AuthenticationApi(config)
  });

  test("oauth2AuthorizeGet", () => {
    return expect(instance.oauth2AuthorizeGet({})).resolves.toBe(null)
  })
  test("oauth2AuthorizePost", () => {
    return expect(instance.oauth2AuthorizePost({})).resolves.toBe(null)
  })
  test("oauth2IdentityGet", () => {
    return expect(instance.oauth2IdentityGet({})).resolves.toBe(null)
  })
  test("oauthclientAntiforgeryGet", () => {
    return expect(instance.oauthclientAntiforgeryGet({})).resolves.toBe(null)
  })
  test("oauthclientInfoGet", () => {
    const clientId: string = "clientId_example"
    return expect(instance.oauthclientInfoGet(clientId, {})).resolves.toBe(null)
  })
  test("signinApprovePost", () => {
    const returnUrl: string = "returnUrl_example"
    const leaderboardId: string = "leaderboardId_example"
    return expect(instance.signinApprovePost(returnUrl, leaderboardId, {})).resolves.toBe(null)
  })
  test("signinGet", () => {
    return expect(instance.signinGet({})).resolves.toBe(null)
  })
  test("signinPost", () => {
    const provider: string = "provider_example"
    const returnUrl: string = "returnUrl_example"
    const oauthState: string = "oauthState_example"
    return expect(instance.signinPost(provider, returnUrl, oauthState, {})).resolves.toBe(null)
  })
  test("signinmigrateOculuspcPost", () => {
    const provider: string = "provider_example"
    const returnUrl: string = "returnUrl_example"
    const token: string = "token_example"
    return expect(instance.signinmigrateOculuspcPost(provider, returnUrl, token, {})).resolves.toBe(null)
  })
  test("signinmigratePost", () => {
    const provider: string = "provider_example"
    const returnUrl: string = "returnUrl_example"
    return expect(instance.signinmigratePost(provider, returnUrl, {})).resolves.toBe(null)
  })
  test("signinoculusOculuspcPost", () => {
    const token: string = "token_example"
    const returnUrl: string = "returnUrl_example"
    return expect(instance.signinoculusOculuspcPost(token, returnUrl, {})).resolves.toBe(null)
  })
  test("signinoculusPost", () => {
    const oauthState: string = "oauthState_example"
    return expect(instance.signinoculusPost(oauthState, {})).resolves.toBe(null)
  })
  test("signoutGet", () => {
    return expect(instance.signoutGet({})).resolves.toBe(null)
  })
  test("signoutPost", () => {
    return expect(instance.signoutPost({})).resolves.toBe(null)
  })
  test("steamcallbackGet", () => {
    const returnUrl: string = "returnUrl_example"
    const random: number = 56
    const migrateTo: string = "migrateTo_example"
    const oauthState: string = "oauthState_example"
    return expect(instance.steamcallbackGet(returnUrl, random, migrateTo, oauthState, {})).resolves.toBe(null)
  })
})

describe("BackupApi", () => {
  let instance: api.BackupApi
  beforeEach(function() {
    instance = new api.BackupApi(config)
  });

  test("backupFileContainerFilenameGet", () => {
    const container: S3Container = undefined
    const filename: string = "filename_example"
    return expect(instance.backupFileContainerFilenameGet(container, filename, {})).resolves.toBe(null)
  })
})

describe("BeatSaverApi", () => {
  let instance: api.BeatSaverApi
  beforeEach(function() {
    instance = new api.BeatSaverApi(config)
  });

  test("beatsaverRefreshGet", () => {
    return expect(instance.beatsaverRefreshGet({})).resolves.toBe(null)
  })
  test("userApproveQualificationGet", () => {
    const leaderboardId: string = "leaderboardId_example"
    return expect(instance.userApproveQualificationGet(leaderboardId, {})).resolves.toBe(null)
  })
  test("userLinkBeatSaverAndApproveGet", () => {
    const leaderboardId: string = "leaderboardId_example"
    const returnUrl: string = "returnUrl_example"
    return expect(instance.userLinkBeatSaverAndApproveGet(leaderboardId, returnUrl, {})).resolves.toBe(null)
  })
  test("userLinkBeatSaverGet", () => {
    const returnUrl: string = "returnUrl_example"
    const oauthState: string = "oauthState_example"
    return expect(instance.userLinkBeatSaverGet(returnUrl, oauthState, {})).resolves.toBe(null)
  })
})

describe("ClanApi", () => {
  let instance: api.ClanApi
  beforeEach(function() {
    instance = new api.ClanApi(config)
  });

  test("clanAcceptPost", () => {
    const id: number = 56
    return expect(instance.clanAcceptPost(id, {})).resolves.toBe(null)
  })
  test("clanCancelinvitePost", () => {
    const player: string = "player_example"
    return expect(instance.clanCancelinvitePost(player, {})).resolves.toBe(null)
  })
  test("clanCreatePost", () => {
    const name: string = "name_example"
    const tag: string = "tag_example"
    const color: string = "color_example"
    const description: string = "description_example"
    const bio: string = "bio_example"
    return expect(instance.clanCreatePost(name, tag, color, description, bio, {})).resolves.toBe(null)
  })
  test("clanDelete", () => {
    const id: number = 56
    return expect(instance.clanDelete(id, {})).resolves.toBe(null)
  })
  test("clanInvitePost", () => {
    const player: string = "player_example"
    return expect(instance.clanInvitePost(player, {})).resolves.toBe(null)
  })
  test("clanKickplayerPost", () => {
    const player: string = "player_example"
    const id: number = 56
    return expect(instance.clanKickplayerPost(player, id, {})).resolves.toBe(null)
  })
  test("clanLeavePost", () => {
    const id: number = 56
    return expect(instance.clanLeavePost(id, {})).resolves.toBe(null)
  })
  test("clanPut", () => {
    const id: number = 56
    const name: string = "name_example"
    const color: string = "color_example"
    const description: string = "description_example"
    const bio: string = "bio_example"
    return expect(instance.clanPut(id, name, color, description, bio, {})).resolves.toBe(null)
  })
  test("clanRejectPost", () => {
    const id: number = 56
    const ban: boolean = true
    return expect(instance.clanRejectPost(id, ban, {})).resolves.toBe(null)
  })
  test("clanReserveDelete", () => {
    const tag: string = "tag_example"
    return expect(instance.clanReserveDelete(tag, {})).resolves.toBe(null)
  })
  test("clanReservePost", () => {
    const tag: string = "tag_example"
    return expect(instance.clanReservePost(tag, {})).resolves.toBe(null)
  })
  test("clanTagGet", () => {
    const tag: string = "tag_example"
    const page: number = 56
    const count: number = 56
    const sort: string = "sort_example"
    const order: Order = undefined
    const search: string = "search_example"
    const type: string = "type_example"
    return expect(instance.clanTagGet(tag, page, count, sort, order, search, type, {})).resolves.toBe(null)
  })
  test("clanUnbanPost", () => {
    const id: number = 56
    return expect(instance.clanUnbanPost(id, {})).resolves.toBe(null)
  })
  test("clansGet", () => {
    const page: number = 56
    const count: number = 56
    const sort: string = "sort_example"
    const order: Order = undefined
    const search: string = "search_example"
    const type: string = "type_example"
    const sortBy: string = "sortBy_example"
    return expect(instance.clansGet(page, count, sort, order, search, type, sortBy, {})).resolves.toBe(null)
  })
})

describe("CurrentUserApi", () => {
  let instance: api.CurrentUserApi
  beforeEach(function() {
    instance = new api.CurrentUserApi(config)
  });

  test("userBanPost", () => {
    const id: string = "id_example"
    const reason: string = "reason_example"
    const duration: number = 56
    const bot: boolean = true
    return expect(instance.userBanPost(id, reason, duration, bot, {})).resolves.toBe(null)
  })
  test("userChangeLoginPatch", () => {
    const newLogin: string = "newLogin_example"
    return expect(instance.userChangeLoginPatch(newLogin, {})).resolves.toBe(null)
  })
  test("userChangePasswordPatch", () => {
    const login: string = "login_example"
    const oldPassword: string = "oldPassword_example"
    const newPassword: string = "newPassword_example"
    return expect(instance.userChangePasswordPatch(login, oldPassword, newPassword, {})).resolves.toBe(null)
  })
  test("userCoverDelete", () => {
    const id: string = "id_example"
    return expect(instance.userCoverDelete(id, {})).resolves.toBe(null)
  })
  test("userCoverPatch", () => {
    const id: string = "id_example"
    return expect(instance.userCoverPatch(id, {})).resolves.toBe(null)
  })
  test("userFailedscoreFalsepositivePost", () => {
    const id: number = 56
    return expect(instance.userFailedscoreFalsepositivePost(id, {})).resolves.toBe(null)
  })
  test("userFailedscoreRemovePost", () => {
    const id: number = 56
    return expect(instance.userFailedscoreRemovePost(id, {})).resolves.toBe(null)
  })
  test("userFailedscoreRetryPost", () => {
    const id: number = 56
    const allow: boolean = true
    return expect(instance.userFailedscoreRetryPost(id, allow, {})).resolves.toBe(null)
  })
  test("userFailedscoresGet", () => {
    const page: number = 56
    const count: number = 56
    const id: string = "id_example"
    return expect(instance.userFailedscoresGet(page, count, id, {})).resolves.toBe(null)
  })
  test("userFriendDelete", () => {
    const playerId: string = "playerId_example"
    return expect(instance.userFriendDelete(playerId, {})).resolves.toBe(null)
  })
  test("userFriendPost", () => {
    const playerId: string = "playerId_example"
    return expect(instance.userFriendPost(playerId, {})).resolves.toBe(null)
  })
  test("userGet", () => {
    return expect(instance.userGet({})).resolves.toBe(null)
  })
  test("userHideopscoresPost", () => {
    const id: string = "id_example"
    return expect(instance.userHideopscoresPost(id, {})).resolves.toBe(null)
  })
  test("userIdGet", () => {
    return expect(instance.userIdGet({})).resolves.toBe(null)
  })
  test("userMigratePost", () => {
    const login: string = "login_example"
    const password: string = "password_example"
    return expect(instance.userMigratePost(login, password, {})).resolves.toBe(null)
  })
  test("userMigrateoculuspcGet", () => {
    const returnUrl: string = "returnUrl_example"
    const token: string = "token_example"
    return expect(instance.userMigrateoculuspcGet(returnUrl, token, {})).resolves.toBe(null)
  })
  test("userModinterfaceGet", () => {
    return expect(instance.userModinterfaceGet({})).resolves.toBe(null)
  })
  test("userPatch", () => {
    const name: string = "name_example"
    const country: string = "country_example"
    const profileAppearance: string = "profileAppearance_example"
    const message: string = "message_example"
    const hue: number = 3.4
    const saturation: number = 3.4
    const effectName: string = "effectName_example"
    const leftSaberColor: string = "leftSaberColor_example"
    const rightSaberColor: string = "rightSaberColor_example"
    const starredFriends: string = "starredFriends_example"
    const showBots: boolean = true
    const showAllRatings: boolean = true
    const id: string = "id_example"
    return expect(instance.userPatch(name, country, profileAppearance, message, hue, saturation, effectName, leftSaberColor, rightSaberColor, starredFriends, showBots, showAllRatings, id, {})).resolves.toBe(null)
  })
  test("userResetPasswordPatch", () => {
    const login: string = "login_example"
    const newPassword: string = "newPassword_example"
    return expect(instance.userResetPasswordPatch(login, newPassword, {})).resolves.toBe(null)
  })
  test("userUnbanPost", () => {
    const id: string = "id_example"
    return expect(instance.userUnbanPost(id, {})).resolves.toBe(null)
  })
})

describe("FriendsApi", () => {
  let instance: api.FriendsApi
  beforeEach(function() {
    instance = new api.FriendsApi(config)
  });

  test("userFriendActivityGet", () => {
    const id: string = "id_example"
    const sortBy: string = "sortBy_example"
    const order: Order = undefined
    const page: number = 56
    const count: number = 56
    const search: string = "search_example"
    const type: FriendActivityType = undefined
    return expect(instance.userFriendActivityGet(id, sortBy, order, page, count, search, type, {})).resolves.toBe(null)
  })
  test("userFriendScoresGet", () => {
    const id: string = "id_example"
    const sortBy: string = "sortBy_example"
    const order: Order = undefined
    const page: number = 56
    const count: number = 56
    const search: string = "search_example"
    const diff: string = "diff_example"
    const type: string = "type_example"
    const starsFrom: number = 3.4
    const starsTo: number = 3.4
    return expect(instance.userFriendScoresGet(id, sortBy, order, page, count, search, diff, type, starsFrom, starsTo, {})).resolves.toBe(null)
  })
})

describe("LeaderboardApi", () => {
  let instance: api.LeaderboardApi
  beforeEach(function() {
    instance = new api.LeaderboardApi(config)
  });

  test("leaderboardIdGet", () => {
    const id: string = "id_example"
    const page: number = 56
    const count: number = 56
    const sortBy: string = "sortBy_example"
    const order: Order = undefined
    const scoreStatus: ScoreFilterStatus = undefined
    const countries: string = "countries_example"
    const search: string = "search_example"
    const modifiers: string = "modifiers_example"
    const friends: boolean = true
    const voters: boolean = true
    return expect(instance.leaderboardIdGet(id, page, count, sortBy, order, scoreStatus, countries, search, modifiers, friends, voters, {})).resolves.toBe(null)
  })
  test("leaderboardRankingIdGet", () => {
    const id: string = "id_example"
    return expect(instance.leaderboardRankingIdGet(id, {})).resolves.toBe(null)
  })
  test("leaderboardStatisticIdGet", () => {
    const id: string = "id_example"
    return expect(instance.leaderboardStatisticIdGet(id, {})).resolves.toBe(null)
  })
  test("leaderboardsGet", () => {
    const page: number = 56
    const count: number = 56
    const sortBy: SortBy = undefined
    const order: Order = undefined
    const search: string = "search_example"
    const type: Type = undefined
    const mode: string = "mode_example"
    const mapType: number = 56
    const allTypes: Operation = undefined
    const mapRequirements: Requirements = undefined
    const allRequirements: Operation = undefined
    const mytype: MyType = undefined
    const starsFrom: number = 3.4
    const starsTo: number = 3.4
    const accratingFrom: number = 3.4
    const accratingTo: number = 3.4
    const passratingFrom: number = 3.4
    const passratingTo: number = 3.4
    const techratingFrom: number = 3.4
    const techratingTo: number = 3.4
    const dateFrom: number = 56
    const dateTo: number = 56
    return expect(instance.leaderboardsGet(page, count, sortBy, order, search, type, mode, mapType, allTypes, mapRequirements, allRequirements, mytype, starsFrom, starsTo, accratingFrom, accratingTo, passratingFrom, passratingTo, techratingFrom, techratingTo, dateFrom, dateTo, {})).resolves.toBe(null)
  })
  test("leaderboardsGrouppedGet", () => {
    const page: number = 56
    const count: number = 56
    const sortBy: SortBy = undefined
    const order: Order = undefined
    const search: string = "search_example"
    const type: Type = undefined
    const mode: string = "mode_example"
    const mapType: number = 56
    const allTypes: Operation = undefined
    const mapRequirements: Requirements = undefined
    const allRequirements: Operation = undefined
    const mytype: MyType = undefined
    const starsFrom: number = 3.4
    const starsTo: number = 3.4
    const accratingFrom: number = 3.4
    const accratingTo: number = 3.4
    const passratingFrom: number = 3.4
    const passratingTo: number = 3.4
    const techratingFrom: number = 3.4
    const techratingTo: number = 3.4
    const dateFrom: number = 56
    const dateTo: number = 56
    return expect(instance.leaderboardsGrouppedGet(page, count, sortBy, order, search, type, mode, mapType, allTypes, mapRequirements, allRequirements, mytype, starsFrom, starsTo, accratingFrom, accratingTo, passratingFrom, passratingTo, techratingFrom, techratingTo, dateFrom, dateTo, {})).resolves.toBe(null)
  })
  test("leaderboardsHashHashGet", () => {
    const hash: string = "hash_example"
    return expect(instance.leaderboardsHashHashGet(hash, {})).resolves.toBe(null)
  })
  test("leaderboardsRefreshGet", () => {
    const id: string = "id_example"
    return expect(instance.leaderboardsRefreshGet(id, {})).resolves.toBe(null)
  })
})

describe("MapEvaluationApi", () => {
  let instance: api.MapEvaluationApi
  beforeEach(function() {
    instance = new api.MapEvaluationApi(config)
  });

  test("criteriaCheckIdGet", () => {
    const id: string = "id_example"
    return expect(instance.criteriaCheckIdGet(id, {})).resolves.toBe(null)
  })
})

describe("MiniRankingApi", () => {
  let instance: api.MiniRankingApi
  beforeEach(function() {
    instance = new api.MiniRankingApi(config)
  });

  test("minirankingsGet", () => {
    const rank: number = 56
    const country: string = "country_example"
    const countryRank: number = 56
    return expect(instance.minirankingsGet(rank, country, countryRank, {})).resolves.toBe(null)
  })
})

describe("ModApi", () => {
  let instance: api.ModApi
  beforeEach(function() {
    instance = new api.ModApi(config)
  });

  test("modLastVersionsGet", () => {
    return expect(instance.modLastVersionsGet({})).resolves.toBe(null)
  })
  test("servernameGet", () => {
    return expect(instance.servernameGet({})).resolves.toBe(null)
  })
})

describe("ModifiersApi", () => {
  let instance: api.ModifiersApi
  beforeEach(function() {
    instance = new api.ModifiersApi(config)
  });

  test("modifiersGet", () => {
    return expect(instance.modifiersGet({})).resolves.toBe(null)
  })
})

describe("PatreonApi", () => {
  let instance: api.PatreonApi
  beforeEach(function() {
    instance = new api.PatreonApi(config)
  });

  test("refreshPatreonGet", () => {
    return expect(instance.refreshPatreonGet({})).resolves.toBe(null)
  })
  test("refreshmypatreonGet", () => {
    return expect(instance.refreshmypatreonGet({})).resolves.toBe(null)
  })
  test("userLinkPatreonGet", () => {
    const returnUrl: string = "returnUrl_example"
    return expect(instance.userLinkPatreonGet(returnUrl, {})).resolves.toBe(null)
  })
})

describe("PlayerApi", () => {
  let instance: api.PlayerApi
  beforeEach(function() {
    instance = new api.PlayerApi(config)
  });

  test("attemptsDelete", () => {
    return expect(instance.attemptsDelete({})).resolves.toBe(null)
  })
  test("authinfoLoginDelete", () => {
    const login: string = "login_example"
    return expect(instance.authinfoLoginDelete(login, {})).resolves.toBe(null)
  })
  test("authipsDelete", () => {
    return expect(instance.authipsDelete({})).resolves.toBe(null)
  })
  test("badgeIdPut", () => {
    const id: number = 56
    const description: string = "description_example"
    const image: string = "image_example"
    const link: string = "link_example"
    return expect(instance.badgeIdPut(id, description, image, link, {})).resolves.toBe(null)
  })
  test("badgePut", () => {
    const description: string = "description_example"
    const link: string = "link_example"
    return expect(instance.badgePut(description, link, {})).resolves.toBe(null)
  })
  test("eventIdPlayersGet", () => {
    const id: number = 56
    const sortBy: string = "sortBy_example"
    const page: number = 56
    const count: number = 56
    const search: string = "search_example"
    const order: Order = undefined
    const countries: string = "countries_example"
    return expect(instance.eventIdPlayersGet(id, sortBy, page, count, search, order, countries, {})).resolves.toBe(null)
  })
  test("oculususerGet", () => {
    const token: string = "token_example"
    return expect(instance.oculususerGet(token, {})).resolves.toBe(null)
  })
  test("playerBadgePlayerIdBadgeIdPut", () => {
    const playerId: string = "playerId_example"
    const badgeId: number = 56
    return expect(instance.playerBadgePlayerIdBadgeIdPut(playerId, badgeId, {})).resolves.toBe(null)
  })
  test("playerBeatsaverIdGet", () => {
    const id: string = "id_example"
    return expect(instance.playerBeatsaverIdGet(id, {})).resolves.toBe(null)
  })
  test("playerDiscordIdGet", () => {
    const id: string = "id_example"
    return expect(instance.playerDiscordIdGet(id, {})).resolves.toBe(null)
  })
  test("playerIdGet", () => {
    const id: string = "id_example"
    const stats: boolean = true
    const keepOriginalId: boolean = true
    return expect(instance.playerIdGet(id, stats, keepOriginalId, {})).resolves.toBe(null)
  })
  test("playerlinkIdDelete", () => {
    const id: string = "id_example"
    return expect(instance.playerlinkIdDelete(id, {})).resolves.toBe(null)
  })
  test("playerlinkLoginGet", () => {
    const login: string = "login_example"
    return expect(instance.playerlinkLoginGet(login, {})).resolves.toBe(null)
  })
  test("playersGet", () => {
    const sortBy: string = "sortBy_example"
    const page: number = 56
    const count: number = 56
    const search: string = "search_example"
    const order: Order = undefined
    const countries: string = "countries_example"
    const mapsType: string = "mapsType_example"
    const ppType: string = "ppType_example"
    const friends: boolean = true
    const ppRange: string = "ppRange_example"
    const scoreRange: string = "scoreRange_example"
    const platform: string = "platform_example"
    const role: string = "role_example"
    const hmd: string = "hmd_example"
    const clans: string = "clans_example"
    const activityPeriod: number = 56
    const banned: boolean = true
    return expect(instance.playersGet(sortBy, page, count, search, order, countries, mapsType, ppType, friends, ppRange, scoreRange, platform, role, hmd, clans, activityPeriod, banned, {})).resolves.toBe(null)
  })
})

describe("PlayerRefreshApi", () => {
  let instance: api.PlayerRefreshApi
  beforeEach(function() {
    instance = new api.PlayerRefreshApi(config)
  });

  test("playerIdRefreshGet", () => {
    const id: string = "id_example"
    const refreshRank: boolean = true
    return expect(instance.playerIdRefreshGet(id, refreshRank, {})).resolves.toBe(null)
  })
  test("playersLeaderboardIdRefreshGet", () => {
    const id: string = "id_example"
    return expect(instance.playersLeaderboardIdRefreshGet(id, {})).resolves.toBe(null)
  })
  test("playersRankrefreshGet", () => {
    return expect(instance.playersRankrefreshGet({})).resolves.toBe(null)
  })
  test("playersRefreshGet", () => {
    return expect(instance.playersRefreshGet({})).resolves.toBe(null)
  })
  test("playersStatsRefreshGet", () => {
    return expect(instance.playersStatsRefreshGet({})).resolves.toBe(null)
  })
  test("playersSteamRefreshGet", () => {
    return expect(instance.playersSteamRefreshGet({})).resolves.toBe(null)
  })
})

describe("PlayerScoresApi", () => {
  let instance: api.PlayerScoresApi
  beforeEach(function() {
    instance = new api.PlayerScoresApi(config)
  });

  test("playerIdAccgraphGet", () => {
    const id: string = "id_example"
    return expect(instance.playerIdAccgraphGet(id, {})).resolves.toBe(null)
  })
  test("playerIdHistogramGet", () => {
    const id: string = "id_example"
    const sortBy: string = "sortBy_example"
    const order: Order = undefined
    const count: number = 56
    const search: string = "search_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const requirements: Requirements = undefined
    const scoreStatus: ScoreFilterStatus = undefined
    const type: string = "type_example"
    const modifiers: string = "modifiers_example"
    const starsFrom: number = 3.4
    const starsTo: number = 3.4
    const timeFrom: number = 56
    const timeTo: number = 56
    const eventId: number = 56
    const batch: number = 3.4
    return expect(instance.playerIdHistogramGet(id, sortBy, order, count, search, diff, mode, requirements, scoreStatus, type, modifiers, starsFrom, starsTo, timeFrom, timeTo, eventId, batch, {})).resolves.toBe(null)
  })
  test("playerIdHistoryGet", () => {
    const id: string = "id_example"
    const count: number = 56
    return expect(instance.playerIdHistoryGet(id, count, {})).resolves.toBe(null)
  })
  test("playerIdPinnedScoresGet", () => {
    const id: string = "id_example"
    return expect(instance.playerIdPinnedScoresGet(id, {})).resolves.toBe(null)
  })
  test("playerIdScoreLeaderboardIDDelete", () => {
    const id: string = "id_example"
    const leaderboardID: string = "leaderboardID_example"
    return expect(instance.playerIdScoreLeaderboardIDDelete(id, leaderboardID, {})).resolves.toBe(null)
  })
  test("playerIdScoresCompactGet", () => {
    const id: string = "id_example"
    const sortBy: string = "sortBy_example"
    const order: Order = undefined
    const page: number = 56
    const count: number = 56
    const search: string = "search_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const requirements: Requirements = undefined
    const scoreStatus: ScoreFilterStatus = undefined
    const type: string = "type_example"
    const modifiers: string = "modifiers_example"
    const starsFrom: number = 3.4
    const starsTo: number = 3.4
    const timeFrom: number = 56
    const timeTo: number = 56
    const eventId: number = 56
    return expect(instance.playerIdScoresCompactGet(id, sortBy, order, page, count, search, diff, mode, requirements, scoreStatus, type, modifiers, starsFrom, starsTo, timeFrom, timeTo, eventId, {})).resolves.toBe(null)
  })
  test("playerIdScoresGet", () => {
    const id: string = "id_example"
    const sortBy: string = "sortBy_example"
    const order: Order = undefined
    const page: number = 56
    const count: number = 56
    const search: string = "search_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const requirements: Requirements = undefined
    const scoreStatus: ScoreFilterStatus = undefined
    const type: string = "type_example"
    const modifiers: string = "modifiers_example"
    const starsFrom: number = 3.4
    const starsTo: number = 3.4
    const timeFrom: number = 56
    const timeTo: number = 56
    const eventId: number = 56
    return expect(instance.playerIdScoresGet(id, sortBy, order, page, count, search, diff, mode, requirements, scoreStatus, type, modifiers, starsFrom, starsTo, timeFrom, timeTo, eventId, {})).resolves.toBe(null)
  })
  test("playerIdScorevalueHashDifficultyModeGet", () => {
    const id: string = "id_example"
    const hash: string = "hash_example"
    const difficulty: string = "difficulty_example"
    const mode: string = "mode_example"
    return expect(instance.playerIdScorevalueHashDifficultyModeGet(id, hash, difficulty, mode, {})).resolves.toBe(null)
  })
})

describe("PlaylistApi", () => {
  let instance: api.PlaylistApi
  beforeEach(function() {
    instance = new api.PlaylistApi(config)
  });

  test("eventIdGet", () => {
    const id: number = 56
    return expect(instance.eventIdGet(id, {})).resolves.toBe(null)
  })
  test("eventIdRefreshGet", () => {
    const id: number = 56
    return expect(instance.eventIdRefreshGet(id, {})).resolves.toBe(null)
  })
  test("eventStartIdPost", () => {
    const id: number = 56
    const name: string = "name_example"
    const endDate: number = 56
    return expect(instance.eventStartIdPost(id, name, endDate, {})).resolves.toBe(null)
  })
  test("eventsGet", () => {
    const page: number = 56
    const count: number = 56
    const sortBy: string = "sortBy_example"
    const search: string = "search_example"
    const order: Order = undefined
    return expect(instance.eventsGet(page, count, sortBy, search, order, {})).resolves.toBe(null)
  })
  test("playlistGenerateGet", () => {
    const count: number = 56
    const sortBy: SortBy = undefined
    const order: Order = undefined
    const search: string = "search_example"
    const type: Type = undefined
    const mode: string = "mode_example"
    const mapType: number = 56
    const allTypes: Operation = undefined
    const mapRequirements: Requirements = undefined
    const allRequirements: Operation = undefined
    const mytype: MyType = undefined
    const starsFrom: number = 3.4
    const starsTo: number = 3.4
    const accratingFrom: number = 3.4
    const accratingTo: number = 3.4
    const passratingFrom: number = 3.4
    const passratingTo: number = 3.4
    const techratingFrom: number = 3.4
    const techratingTo: number = 3.4
    const dateFrom: number = 56
    const dateTo: number = 56
    const duplicateDiffs: boolean = true
    const title: string = "title_example"
    return expect(instance.playlistGenerateGet(count, sortBy, order, search, type, mode, mapType, allTypes, mapRequirements, allRequirements, mytype, starsFrom, starsTo, accratingFrom, accratingTo, passratingFrom, passratingTo, techratingFrom, techratingTo, dateFrom, dateTo, duplicateDiffs, title, {})).resolves.toBe(null)
  })
  test("playlistIdGet", () => {
    const id: string = "id_example"
    return expect(instance.playlistIdGet(id, {})).resolves.toBe(null)
  })
  test("playlistImageIdGet", () => {
    const id: string = "id_example"
    return expect(instance.playlistImageIdGet(id, {})).resolves.toBe(null)
  })
  test("playlistRefreshnominatedGet", () => {
    return expect(instance.playlistRefreshnominatedGet({})).resolves.toBe(null)
  })
  test("playlistRefreshqualifiedGet", () => {
    return expect(instance.playlistRefreshqualifiedGet({})).resolves.toBe(null)
  })
  test("playlistRefreshrankedGet", () => {
    return expect(instance.playlistRefreshrankedGet({})).resolves.toBe(null)
  })
  test("playlistScoresGenerateGet", () => {
    const count: number = 56
    const playerId: string = "playerId_example"
    const sortBy: string = "sortBy_example"
    const order: Order = undefined
    const search: string = "search_example"
    const diff: string = "diff_example"
    const type: string = "type_example"
    const mode: string = "mode_example"
    const requirements: Requirements = undefined
    const modifiers: string = "modifiers_example"
    const starsFrom: number = 3.4
    const starsTo: number = 3.4
    const timeFrom: number = 56
    const timeTo: number = 56
    const eventId: number = 56
    const duplicateDiffs: boolean = true
    return expect(instance.playlistScoresGenerateGet(count, playerId, sortBy, order, search, diff, type, mode, requirements, modifiers, starsFrom, starsTo, timeFrom, timeTo, eventId, duplicateDiffs, {})).resolves.toBe(null)
  })
  test("playlistsGet", () => {
    return expect(instance.playlistsGet({})).resolves.toBe(null)
  })
  test("userOneclickdoneGet", () => {
    return expect(instance.userOneclickdoneGet({})).resolves.toBe(null)
  })
  test("userOneclickplaylistGet", () => {
    return expect(instance.userOneclickplaylistGet({})).resolves.toBe(null)
  })
  test("userOneclickplaylistPost", () => {
    return expect(instance.userOneclickplaylistPost({})).resolves.toBe(null)
  })
  test("userPlaylistDelete", () => {
    const id: number = 56
    return expect(instance.userPlaylistDelete(id, {})).resolves.toBe(null)
  })
  test("userPlaylistPost", () => {
    const id: number = 56
    return expect(instance.userPlaylistPost(id, {})).resolves.toBe(null)
  })
  test("userPlaylistsGet", () => {
    return expect(instance.userPlaylistsGet({})).resolves.toBe(null)
  })
})

describe("PreviewApi", () => {
  let instance: api.PreviewApi
  beforeEach(function() {
    instance = new api.PreviewApi(config)
  });

  test("previewReplayGet", () => {
    const playerID: string = "playerID_example"
    const id: string = "id_example"
    const difficulty: string = "difficulty_example"
    const mode: string = "mode_example"
    const link: string = "link_example"
    const scoreId: number = 56
    return expect(instance.previewReplayGet(playerID, id, difficulty, mode, link, scoreId, {})).resolves.toBe(null)
  })
  test("previewRoyaleGet", () => {
    const players: string = "players_example"
    const hash: string = "hash_example"
    const difficulty: string = "difficulty_example"
    const mode: string = "mode_example"
    return expect(instance.previewRoyaleGet(players, hash, difficulty, mode, {})).resolves.toBe(null)
  })
})

describe("RankApi", () => {
  let instance: api.RankApi
  beforeEach(function() {
    instance = new api.RankApi(config)
  });

  test("grantRTJuniorPlayerIdGet", () => {
    const playerId: string = "playerId_example"
    return expect(instance.grantRTJuniorPlayerIdGet(playerId, {})).resolves.toBe(null)
  })
  test("nominateHashDiffModePost", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    return expect(instance.nominateHashDiffModePost(hash, diff, mode, {})).resolves.toBe(null)
  })
  test("prevQualTimeHashGet", () => {
    const hash: string = "hash_example"
    return expect(instance.prevQualTimeHashGet(hash, {})).resolves.toBe(null)
  })
  test("qualificationCommentIdDelete", () => {
    const id: number = 56
    return expect(instance.qualificationCommentIdDelete(id, {})).resolves.toBe(null)
  })
  test("qualificationCommentIdPost", () => {
    const id: number = 56
    return expect(instance.qualificationCommentIdPost(id, {})).resolves.toBe(null)
  })
  test("qualificationCommentIdPut", () => {
    const id: number = 56
    return expect(instance.qualificationCommentIdPut(id, {})).resolves.toBe(null)
  })
  test("qualificationCriteriaIdDelete", () => {
    const id: number = 56
    return expect(instance.qualificationCriteriaIdDelete(id, {})).resolves.toBe(null)
  })
  test("qualificationCriteriaIdPost", () => {
    const id: number = 56
    return expect(instance.qualificationCriteriaIdPost(id, {})).resolves.toBe(null)
  })
  test("qualificationCriteriaIdPut", () => {
    const id: number = 56
    return expect(instance.qualificationCriteriaIdPut(id, {})).resolves.toBe(null)
  })
  test("qualificationHashDiffModePost", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const newStatus: DifficultyStatus = undefined
    const accRating: number = 3.4
    const passRating: number = 3.4
    const techRating: number = 3.4
    const type: number = 56
    const criteriaCheck: number = 56
    const criteriaCommentary: string = "criteriaCommentary_example"
    const modifiers: string = "modifiers_example"
    return expect(instance.qualificationHashDiffModePost(hash, diff, mode, newStatus, accRating, passRating, techRating, type, criteriaCheck, criteriaCommentary, modifiers, {})).resolves.toBe(null)
  })
  test("qualificationVoteIdPost", () => {
    const id: number = 56
    const vote: MapQuality = undefined
    return expect(instance.qualificationVoteIdPost(id, vote, {})).resolves.toBe(null)
  })
  test("rankHashDiffModePost", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const rankability: number = 3.4
    const accRating: number = 3.4
    const passRating: number = 3.4
    const techRating: number = 3.4
    const type: number = 56
    return expect(instance.rankHashDiffModePost(hash, diff, mode, rankability, accRating, passRating, techRating, type, {})).resolves.toBe(null)
  })
  test("rankabunchPost", () => {
    const body: { [key: string]: number; } = undefined
    return expect(instance.rankabunchPost(body, {})).resolves.toBe(null)
  })
  test("removeRTJuniorPlayerIdGet", () => {
    const playerId: string = "playerId_example"
    return expect(instance.removeRTJuniorPlayerIdGet(playerId, {})).resolves.toBe(null)
  })
  test("reweightApproveHashDiffModePost", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    return expect(instance.reweightApproveHashDiffModePost(hash, diff, mode, {})).resolves.toBe(null)
  })
  test("reweightCancelHashDiffModePost", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    return expect(instance.reweightCancelHashDiffModePost(hash, diff, mode, {})).resolves.toBe(null)
  })
  test("reweightHashDiffModePost", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const keep: boolean = true
    const stars: number = 3.4
    const type: number = 56
    const criteriaCheck: number = 56
    const criteriaCommentary: string = "criteriaCommentary_example"
    const modifiers: string = "modifiers_example"
    return expect(instance.reweightHashDiffModePost(hash, diff, mode, keep, stars, type, criteriaCheck, criteriaCommentary, modifiers, {})).resolves.toBe(null)
  })
  test("voteHashDiffModePost", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const rankability: number = 3.4
    const stars: string = "stars_example"
    const type: number = 56
    return expect(instance.voteHashDiffModePost(hash, diff, mode, rankability, stars, type, {})).resolves.toBe(null)
  })
  test("voteSteamHashDiffModePost", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const ticket: string = "ticket_example"
    const rankability: number = 3.4
    const stars: string = "stars_example"
    const type: number = 56
    return expect(instance.voteSteamHashDiffModePost(hash, diff, mode, ticket, rankability, stars, type, {})).resolves.toBe(null)
  })
  test("votefeedbackPost", () => {
    const scoreId: number = 56
    const value: number = 3.4
    return expect(instance.votefeedbackPost(scoreId, value, {})).resolves.toBe(null)
  })
  test("votestatusHashDiffModeGet", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const player: string = "player_example"
    return expect(instance.votestatusHashDiffModeGet(hash, diff, mode, player, {})).resolves.toBe(null)
  })
  test("votingSpreadGet", () => {
    return expect(instance.votingSpreadGet({})).resolves.toBe(null)
  })
})

describe("ReplayApi", () => {
  let instance: api.ReplayApi
  beforeEach(function() {
    instance = new api.ReplayApi(config)
  });

  test("replayPost", () => {
    const ticket: string = "ticket_example"
    return expect(instance.replayPost(ticket, {})).resolves.toBe(null)
  })
  test("replayoculusPut", () => {
    const time: number = 3.4
    const type: EndType = undefined
    return expect(instance.replayoculusPut(time, type, {})).resolves.toBe(null)
  })
})

describe("ScoreApi", () => {
  let instance: api.ScoreApi
  beforeEach(function() {
    instance = new api.ScoreApi(config)
  });

  test("replaysGet", () => {
    const count: number = 56
    const page: number = 56
    const dateFrom: number = 56
    const dateTo: number = 56
    return expect(instance.replaysGet(count, page, dateFrom, dateTo, {})).resolves.toBe(null)
  })
  test("scoreCalculatestatisticIdGet", () => {
    const id: string = "id_example"
    return expect(instance.scoreCalculatestatisticIdGet(id, {})).resolves.toBe(null)
  })
  test("scoreIdDelete", () => {
    const id: number = 56
    return expect(instance.scoreIdDelete(id, {})).resolves.toBe(null)
  })
  test("scoreIdGet", () => {
    const id: number = 56
    const fallbackToRedirect: boolean = true
    return expect(instance.scoreIdGet(id, fallbackToRedirect, {})).resolves.toBe(null)
  })
  test("scoreIdPinPut", () => {
    const id: number = 56
    const pin: boolean = true
    const description: string = "description_example"
    const link: string = "link_example"
    const priority: number = 56
    return expect(instance.scoreIdPinPut(id, pin, description, link, priority, {})).resolves.toBe(null)
  })
  test("scorePlayerIDHashDiffModeGet", () => {
    const playerID: string = "playerID_example"
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    return expect(instance.scorePlayerIDHashDiffModeGet(playerID, hash, diff, mode, {})).resolves.toBe(null)
  })
  test("scoreRandomGet", () => {
    return expect(instance.scoreRandomGet({})).resolves.toBe(null)
  })
  test("scoreStatisticIdGet", () => {
    const id: number = 56
    return expect(instance.scoreStatisticIdGet(id, {})).resolves.toBe(null)
  })
  test("scorestatsGet", () => {
    return expect(instance.scorestatsGet({})).resolves.toBe(null)
  })
  test("v3ScoresHashDiffModeContextScopeMethodGet", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const context: string = "context_example"
    const scope: string = "scope_example"
    const method: string = "method_example"
    const player: string = "player_example"
    const page: number = 56
    const count: number = 56
    return expect(instance.v3ScoresHashDiffModeContextScopeMethodGet(hash, diff, mode, context, scope, method, player, page, count, {})).resolves.toBe(null)
  })
  test("v4ScoresHashDiffModeGet", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const page: number = 56
    const count: number = 56
    return expect(instance.v4ScoresHashDiffModeGet(hash, diff, mode, page, count, {})).resolves.toBe(null)
  })
  test("v5ScoresHashDiffModeGet", () => {
    const hash: string = "hash_example"
    const diff: string = "diff_example"
    const mode: string = "mode_example"
    const page: number = 56
    const count: number = 56
    return expect(instance.v5ScoresHashDiffModeGet(hash, diff, mode, page, count, {})).resolves.toBe(null)
  })
})

describe("ScoreRefreshApi", () => {
  let instance: api.ScoreRefreshApi
  beforeEach(function() {
    instance = new api.ScoreRefreshApi(config)
  });

  test("scoresBulkrankrefreshGet", () => {
    return expect(instance.scoresBulkrankrefreshGet({})).resolves.toBe(null)
  })
  test("scoresBulkrefreshGet", () => {
    const leaderboardId: string = "leaderboardId_example"
    return expect(instance.scoresBulkrefreshGet(leaderboardId, {})).resolves.toBe(null)
  })
  test("scoresRefreshGet", () => {
    const leaderboardId: string = "leaderboardId_example"
    return expect(instance.scoresRefreshGet(leaderboardId, {})).resolves.toBe(null)
  })
})

describe("SocialsApi", () => {
  let instance: api.SocialsApi
  beforeEach(function() {
    instance = new api.SocialsApi(config)
  });

  test("userLinkBeatLeaderGet", () => {
    const returnUrl: string = "returnUrl_example"
    return expect(instance.userLinkBeatLeaderGet(returnUrl, {})).resolves.toBe(null)
  })
  test("userLinkDiscordGet", () => {
    const returnUrl: string = "returnUrl_example"
    return expect(instance.userLinkDiscordGet(returnUrl, {})).resolves.toBe(null)
  })
  test("userLinkGoogleGet", () => {
    const returnUrl: string = "returnUrl_example"
    return expect(instance.userLinkGoogleGet(returnUrl, {})).resolves.toBe(null)
  })
  test("userLinkTwitchGet", () => {
    const returnUrl: string = "returnUrl_example"
    return expect(instance.userLinkTwitchGet(returnUrl, {})).resolves.toBe(null)
  })
  test("userLinkTwitterGet", () => {
    const returnUrl: string = "returnUrl_example"
    return expect(instance.userLinkTwitterGet(returnUrl, {})).resolves.toBe(null)
  })
  test("userUnlinkPost", () => {
    const provider: string = "provider_example"
    const returnUrl: string = "returnUrl_example"
    return expect(instance.userUnlinkPost(provider, returnUrl, {})).resolves.toBe(null)
  })
})

describe("SongApi", () => {
  let instance: api.SongApi
  beforeEach(function() {
    instance = new api.SongApi(config)
  });

  test("mapHashHashGet", () => {
    const hash: string = "hash_example"
    return expect(instance.mapHashHashGet(hash, {})).resolves.toBe(null)
  })
  test("mapMigratenominationsGet", () => {
    const baseSongId: string = "baseSongId_example"
    const oldSongId: string = "oldSongId_example"
    const newSongId: string = "newSongId_example"
    return expect(instance.mapMigratenominationsGet(baseSongId, oldSongId, newSongId, {})).resolves.toBe(null)
  })
  test("mapModinterfaceHashGet", () => {
    const hash: string = "hash_example"
    return expect(instance.mapModinterfaceHashGet(hash, {})).resolves.toBe(null)
  })
})

describe("StatsApi", () => {
  let instance: api.StatsApi
  beforeEach(function() {
    instance = new api.StatsApi(config)
  });

  test("playerIdScoresstatsGet", () => {
    const id: string = "id_example"
    const sortBy: string = "sortBy_example"
    const order: Order = undefined
    const page: number = 56
    const count: number = 56
    const search: string = "search_example"
    const diff: string = "diff_example"
    const type: EndType = undefined
    const starsFrom: number = 3.4
    const starsTo: number = 3.4
    const eventId: number = 56
    return expect(instance.playerIdScoresstatsGet(id, sortBy, order, page, count, search, diff, type, starsFrom, starsTo, eventId, {})).resolves.toBe(null)
  })
  test("watchedScoreIdGet", () => {
    const scoreId: number = 56
    return expect(instance.watchedScoreIdGet(scoreId, {})).resolves.toBe(null)
  })
})

describe("UnicodeApi", () => {
  let instance: api.UnicodeApi
  beforeEach(function() {
    instance = new api.UnicodeApi(config)
  });

  test("unicodeNameGet", () => {
    const name: string = "name_example"
    return expect(instance.unicodeNameGet(name, {})).resolves.toBe(null)
  })
})

